{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Date: 24-01-2023</p> <p>Useful links: Source Code</p> <p>This site contains the project documentation for the <code>Cellular Automata Properties Prediction</code> Final Degree Project developed by Ezequiel Gonz\u00e1lez for his 22-23 last year in ETSII college of Seville, Spain.</p> <p>It lets you generate different types of datasets based on 3 rule types. With those you can:</p> <ul> <li>Generate interesting plots based mainly in their density evolution over time.</li> <li>Plot individual estates.</li> <li>Train, evaluate and test Machine Learning models to predict new data.</li> <li>Compare those models performance with plots.</li> </ul>"},{"location":"#main-workflow","title":"Main Workflow","text":"<p>The main idea is to provide an easy to use library to make this process as automated as possible.</p> <p>First you define the CA based on certain attributes like initial state, size, rules etc. Those 3 rules can be also easy extended. This is made in the package <code>CA</code>.</p> <p>Then you can build the dataset with this new CA and the free parameters. Those datasets are stored in <code>data/datasets</code>. This is made in package <code>datasets</code>.</p> <p>Now, with the new built dataset, you can start analyzing it via the multiple plots that are available in the package <code>statistics</code>.</p> <p>Finally, you can train, evaluate and test Machine Learning models to predict new data. This is made in the package <code>learning</code>.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Getting Started</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10.7</li> <li>pipenv (2022.10.11) for virtual environment management</li> </ul>"},{"location":"getting-started/#setup","title":"Setup","text":"<p>First clone the repository from Github:</p> <pre><code>git clone https://github.com/ezegonmac/TFG-CellularAutomata\n</code></pre> <p>Create a virtual environment:</p> <pre><code>cd TFG-CellularAutomata\npipenv shell\n</code></pre> <p>Install requirements:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>The main package is <code>src</code>. It contains the following principal subpackages:</p> <ul> <li><code>CA</code>: Contains the CA class and the 3 rule types.</li> <li><code>datasets</code>: Contains the definition of datasets and the functions to build them.</li> <li><code>statistics</code>: Contains the functions to generate statistical plots of the datasets.</li> <li><code>learning</code>: Contains the functions to train, evaluate and test Machine Learning models.</li> </ul> <p>Those subpackages are explained in detail in the Reference section. Their functions must be called from their specific <code>main</code> files. Those files are located in the <code>src</code> folder.</p> <p>Those main files are:</p> <ul> <li><code>main_datasets.py</code>: Main functions for generating the default datasets.</li> <li><code>main_density_datasets.py</code>: Main functions for generating the density datasets.</li> <li><code>main_density_plots.py</code>: Main functions for generating the density plots.</li> <li><code>main_doc</code>: Main functions for generating the documentation figures.</li> <li><code>main_learning.py</code>: Main functions for managing the learning process.</li> <li><code>main_states.py</code>: Main functions for generating states plots.</li> </ul> <p>Now you can comment/uncomment the functions you want to run in those files, or create your own functions. You can run those files from the <code>src</code> folder with the following command:</p> <pre><code>python src/main_file.py\n</code></pre> <p>If you dont have your virtual environment activated, you should run the following command first:</p> <pre><code>pipenv shell\n</code></pre>"},{"location":"reference/","title":"API Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>calculator</code> project code.</p> <p>This is the main module of the project. It contains the main files of the project.</p> <p>Those files are the only ones that should be executed directly. They should be executed from the root of the project (directory containing the <code>src</code> directory).</p> <p>The main files are: - <code>main_datasets.py</code>: Main functions for generating the default datasets. - <code>main_density_datasets.py</code>: Main functions for generating the density datasets. - <code>main_density_plots.py</code>: Main functions for generating the density plots. - <code>main_doc</code>: Main functions for generating the documentation figures. - <code>main_learning.py</code>: Main functions for managing the learning process. - <code>main_states.py</code>: Main functions for generating states plots.</p> <p>Generate CA objects with different rules strategies.</p> <p>Modules exported by this package:</p> <ul> <li><code>CAFactory</code>: Implements a factory for automating the creation of CA objects with different rule strategy.</li> </ul>"}]}